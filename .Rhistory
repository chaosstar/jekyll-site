draw.traj <- function(func, Pars, tStart=0, tEnd=1, tCut=10, loc.num=1, color = "red") {
traj <- list()
print(paste("Click", loc.num, "initial values"))
x0 <- locator(1, "p", pch=16, col="red")
for (x0 != NULL) {
if(x0 == NULL) stop()
out <- as.data.frame(ode(func=func, y=c(x=x0$x, y=x0$y), parms=Pars, times = seq(tStart, tEnd, length = tCut)))
lines(out$x, out$y, col = color)
traj[[i]] <- out
x0 <- locator(1, "p", pch=16, col="red")
draw.traj <- function(func, Pars, tStart=0, tEnd=1, tCut=10, loc.num=1, color = "red") {
traj <- list()
print(paste("Click", loc.num, "initial values"))
x0 <- locator(1, "p", pch=16, col="red")
while (x0 != NULL) {
out <- as.data.frame(ode(func=func, y=c(x=x0$x, y=x0$y), parms=Pars, times = seq(tStart, tEnd, length = tCut)))
lines(out$x, out$y, col = color)
traj[[i]] <- out
x0 <- locator(1, "p", pch=16, col="red")
}
return(traj)
}
draw.traj <- function(func, Pars, tStart=0, tEnd=1, tCut=10, loc.num=1, color = "red") {
traj <- list()
print(paste("Click", loc.num, "initial values"))
x0 <- locator(1, "p", pch=16, col="red")
while(x0 != NULL){
out <- as.data.frame(ode(func=func, y=c(x=x0$x, y=x0$y), parms=Pars, times = seq(tStart, tEnd, length = tCut)))
lines(out$x, out$y, col = color)
traj[[i]] <- out
x0 <- locator(1, "p", pch=16, col="red")
}
return(traj)
}
traj <- draw.traj(func=fishsysDES, Pars=c(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2), tEnd=10, tCut=1000, loc.num=4)
draw.traj <- function(func, Pars, tStart=0, tEnd=1, tCut=10, loc.num=1, color = "red") {
traj <- list()
print(paste("Click", loc.num, "initial values"))
x0 = 0
while(x0 != NULL){
x0 <- locator(1, "p", pch=16, col="red")
out <- as.data.frame(ode(func=func, y=c(x=x0$x, y=x0$y), parms=Pars, times = seq(tStart, tEnd, length = tCut)))
lines(out$x, out$y, col = color)
traj[[i]] <- out
}
return(traj)
}
nullclines(fishsys(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2),c(0,25),c(0,30),40)
phasearrows(fishsys(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2),c(0,25),c(0,30),20, add=TRUE)
traj <- draw.traj(func=fishsysDES, Pars=c(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2), tEnd=10, tCut=1000, loc.num=4)
?while
x0
x0 != NULL
!is.null(x0)
draw.traj <- function(func, Pars, tStart=0, tEnd=1, tCut=10, loc.num=1, color = "red") {
traj <- list()
print(paste("Click", loc.num, "initial values"))
x0 <- locator(1, "p", pch=16, col="red")
while(!is.null(x0)){
out <- as.data.frame(ode(func=func, y=c(x=x0$x, y=x0$y), parms=Pars, times = seq(tStart, tEnd, length = tCut)))
lines(out$x, out$y, col = color)
traj[[i]] <- out
x0 <- locator(1, "p", pch=16, col="red")
}
return(traj)
}
traj <- draw.traj(func=fishsysDES, Pars=c(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2), tEnd=10, tCut=1000, loc.num=4)
draw.traj <- function(func, Pars, tStart=0, tEnd=1, tCut=10, loc.num=1, color = "red") {
traj <- list()
print(paste("Click", loc.num, "initial values"))
x0 <- locator(1, "p", pch=16, col="red")
i <- 1
while(!is.null(x0)){
out <- as.data.frame(ode(func=func, y=c(x=x0$x, y=x0$y), parms=Pars, times = seq(tStart, tEnd, length = tCut)))
lines(out$x, out$y, col = color)
traj[[i]] <- out
x0 <- locator(1, "p", pch=16, col="red")
i <- i + 1
}
return(traj)
}
traj <- draw.traj(func=fishsysDES, Pars=c(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2), tEnd=10, tCut=1000, loc.num=4)
?rk
phasetraj <- function(fun,tdur=1,tstart=0,tend=tstart+tdur,color='orange'){
x0 <- locator(n=1);
traj <- rk(fun,c(x0$x, x0$y),tstart,tend);
points(x0$x,x0$y);
lines(traj$x[,1], traj$x[,2], col=color);
}
phasetraj(fishsys(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2), tend=10)
nullclines(fishsys(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2),c(0,25),c(0,30),40)
phasearrows(fishsys(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2),c(0,25),c(0,30),20, add=TRUE)
nullclines(fishsys(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2),c(0,25),c(0,30),40)
phasearrows(fishsys(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2),c(0,25),c(0,30),20, add=TRUE)
?countour
?contour
showcontours <- function(fun,xlims, ylims, resol=50,add=F, colors=c('blue', 'blue')) {
x <- matrix(seq(xlims[1],xlims[2], length=resol), byrow=F, resol,resol);
y <- matrix(seq(ylims[1],ylims[2], length=resol),byrow=T, resol, resol);
npts = resol*resol;
z <- fun(x,y);
z1 <- matrix(z[1:npts], resol, resol);
z2 <- matrix(z[(npts+1):(2*npts)], resol, resol);
contour(x[,1],y[1,],z1, add=add, col=colors[1], drawlabels=FALSE, lwd=2);
contour(x[,1],y[1,],z2, add=T, col=colors[2], drawlabels=FALSE, lwd=2);
}
nullclines(fishsys(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2),c(0,25),c(0,30),40)
nullclines <- function(fun,xlims, ylims, resol=50, add=F,colors=c('blue', 'blue')) {
x <- matrix(seq(xlims[1],xlims[2], length=resol), byrow=F, resol,resol);
y <- matrix(seq(ylims[1],ylims[2], length=resol),byrow=T, resol, resol);
npts = resol*resol;
z <- fun(x,y);
z1 <- matrix(z[1:npts], resol, resol);
z2 <- matrix(z[(npts+1):(2*npts)], resol, resol);
contour(x[,1],y[1,],z1,levels=c(0), add=add, col=colors[1], drawlabels=FALSE, lwd=2);
contour(x[,1],y[1,],z2,levels=c(0), add=T, col=colors[2], drawlabels=FALSE, lwd=2);
}
showcontours <- function(fun,xlims, ylims, resol=50,add=F, colors=c('blue', 'blue')) {
x <- matrix(seq(xlims[1],xlims[2], length=resol), byrow=F, resol,resol);
y <- matrix(seq(ylims[1],ylims[2], length=resol),byrow=T, resol, resol);
npts = resol*resol;
z <- fun(x,y);
z1 <- matrix(z[1:npts], resol, resol);
z2 <- matrix(z[(npts+1):(2*npts)], resol, resol);
contour(x[,1],y[1,],z1, add=add, col=colors[1]);
contour(x[,1],y[1,],z2, add=T, col=colors[2]);
}
nullclines(fishsys(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2),c(0,25),c(0,30),40)
?root
?uniroot
fun
fun(1)
fun(2)
fun(1)[1]
predatorprey()
predatorprey(1,2)
predatorprey(1,2)[1]
predatorprey(x=1,y=1)
predatorprey
predatorprey()
predatorprey(1)
predatorprey(2)
predatorprey(x=2,y=1)
fun(x,y)
fun
z <- predatorprey(x,y)
z(1,2)
x
y
z <- predatorprey(1,2)
z
z(1,2)
z <- predatoryprey()
z <- predatorprey()
z
z(1,2)
z(1,2.3)
predatorprey(1,2)
z(1,2)[1]
z()[1]
x <- z()[1]
z <- predatorprey()[1]
xfun <- function(x,y) fun(x,y)[1]
fun <- predatorprey
xfun <- function(x,y) fun(x,y)[1]
xfun(x,y)
xfun(1,2)
xfun <- function(x,y) { a<- fun(x,y); return(a[1])}
xfun
xfun(1,2)
fun(x,y)
z <- fun(x,y);
xfun <- function(x,y) { a <- z(x,y); return(a[1])}
fun
z
xfun
xfun(1,2)
?arrows
nullclines2 <- function(fun,xlims, ylims, resol=50,add=F, colors=c('blue', 'blue')) {
xs <- seq(xlims[1],xlims[2], length=resol);
ys <- seq(ylims[1],ylims[2], length=resol);
z <- fun(x,y);
xvals = rep(0, length=resol)
yvals = rep(0, length=resol)
xfun <- function(y,x) { a <- z(x,y); return(a[1])}
yfun <- function(x,y) { a <- z(x,y); return(a[2])}
for(i in 1:resol) {
xvals[i] <- uniroot(xfun,x=xs[i], ylims)
yvals[i] <- uniroot(yfun,y=ys[i], xlims)
}
if(add=F) {
plot(xs, xvals, type="l", col=colors[1])
} else {
lines(xs, xvals, col=colors[1])
}
lines(ys, yvals, col=colors[2])
}
nullclines2 <- function(fun,xlims, ylims, resol=50,add=F, colors=c('blue', 'blue')) {
xs <- seq(xlims[1],xlims[2], length=resol);
ys <- seq(ylims[1],ylims[2], length=resol);
z <- fun(x,y);
xvals = rep(0, length=resol)
yvals = rep(0, length=resol)
xfun <- function(y,x) { a <- z(x,y); return(a[1])}
yfun <- function(x,y) { a <- z(x,y); return(a[2])}
for(i in 1:resol) {
xvals[i] <- uniroot(xfun,x=xs[i], ylims)
yvals[i] <- uniroot(yfun,y=ys[i], xlims)
}
if(add==F) {
plot(1,xlim=xlims, ylim=ylims, type='n')
}
lines(xs, xvals, col=colors[1])
lines(ys, yvals, col=colors[2])
}
nullclines2(fishsys(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2),c(0,25),c(0,30),40)
nullclines2 <- function(fun,xlims, ylims, resol=50,add=F, colors=c('blue', 'blue')) {
xs <- seq(xlims[1],xlims[2], length=resol);
ys <- seq(ylims[1],ylims[2], length=resol);
z <- fun(x,y);
xvals = rep(0, length=resol)
yvals = rep(0, length=resol)
xfun <- function(y,x) { a <- z(x,y); return(a[1])}
yfun <- function(x,y) { a <- z(x,y); return(a[2])}
for(i in 1:resol) {
xvals[i] <- uniroot(xfun,x=xs[i], ylims)$root
yvals[i] <- uniroot(yfun,y=ys[i], xlims)$root
}
if(add==F) {
plot(1,xlim=xlims, ylim=ylims, type='n')
}
lines(xs, xvals, col=colors[1])
lines(ys, yvals, col=colors[2])
}
nullclines2(fishsys(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2),c(0,25),c(0,30),40)
fun <- fishsys
xlims
ylims
add
add=F
phasearrows(fishsys(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2),c(0,25),c(0,30),20, add=TRUE)
resol=40
xs <- seq(xlims[1],xlims[2], length=resol);
ys <- seq(ylims[1],ylims[2], length=resol);
z <- fun(x,y);
xvals = rep(0, length=resol)
yvals = rep(0, length=resol)
xfun <- function(y,x) { a <- z(x,y); return(a[1])}
yfun <- function(x,y) { a <- z(x,y); return(a[2])}
xs
ys
xvals
xfun
z
xfun(0,0)
xfun(0,30)
xfun(1,30)
xfun(1,0)
nullclines2(fishsys(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2),c(0.01,25),c(0.01,30),40)
nullclines(fishsys(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2),c(0.01,25),c(0.01,30),40)
nullclines(fishsys(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2),c(0.01,25),c(0.01,30),2000)
nullclines(fishsys(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2),c(0.01,25),c(0.01,30),200)
nullclines(fishsys(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2),c(0.01,25),c(0.01,30),250)
phasearrows(fishsys(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2),c(0,25),c(0,30),20, add=TRUE)
traj <- draw.traj(func=fishsysDES, Pars=c(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2), tEnd=10, tCut=1000, loc.num=4)
nullclines(fishsys(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2),c(0.01,25),c(0.01,30),250)
phasearrows(fishsys(c=2, O=1, p=4, r=1.1, d=1, K=20, q=0.25, a=2),c(0,25),c(0,30),20, add=TRUE)
require(knitr)
knit('bvpex.md')
update.packages("knitr")
packageVersion(knitr)
packageVersion("knitr)
packageVersion("knitr")
chooseCRANmirror(graphics = getOption("menu.graphics"))
??CRAN
chooseCRANmirror(graphics = getOption("menu.graphics"))
update.packages("knitr")
packageVersion("knitr")
remove.packages("knitr")
require(knitr)
install.packages("knitr")
packageVersion(knitr)
packageVersion("knitr")
source('~/.active-rstudio-document', echo=TRUE)
grDevices::
grDevices::rstudio
??grDevices
options("device")
dev.cur()
?system
plot(1:2,1:2)
knitrChunkOptions
knitrChunkOptions()
View(lens)
View(lens)
View(lens)
1+2
2+3
2+3
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
2+3
a <- 3
install.packages("mgcv")
install.packages("mgcv")
library(mgcv)
help("mgcv-package")
?gam
dat <- gamSim(1, n=400, dist="normal", scale=2)
View(dat)
head(dat)
tail(dat)
dat
summary(dat)
str(dat)
??outlier
help("stats-package")
library(help="stats")
library("mclust")
detach("package:mclust")
View(dat)
str(dat)
?read.csv
?gam
head(dat)
dat$raca <- dat$y
head(dat)
b <- gam(y~s(x0)+s(x1)+s(x2)+s(x3),data=dat)
b <- gam(raca~s(x0)+s(x1)+s(x2)+s(x3),data=dat)
b
summary(b)
plot(b,pages=1,residuals=TRUE)
?plot.gam
b
summary(b)
?gam
gam.check(b)
print(b)
dat <- gamSim(1,n=400,dist="binary",scale=.33)
dat2 <- gamSim(1,n=400,dist="binary",scale=.33)
head(dat2)
lr.fit <- gam(y~s(x0)+s(x1)+s(x2)+s(x3),family=binomial,data=dat2,method="REML")
plot(lr)
plot(lr.fit)
plot(lr.fit, pages=1)
gam.check(lr.fit)
op <- par(mfrow=c(2,2))
fn <- c("f0","f1","f2","f3");xn <- c("x0","x1","x2","x3")
for (k in 1:4) {
plot(lr.fit,residuals=TRUE,select=k)
ff <- dat[[fn[k]]];xx <- dat[[xn[k]]]
ind <- sort.int(xx,index.return=TRUE)$ix
lines(xx[ind],(ff-mean(ff))[ind]*.33,col=2)
}
par(op)
a
a <- matrix(rnorm(25),5,5)
require(Hmisc)
latexTranslate(a)
print.char.matrix(a)
x <- xtable(x)
x <- xtable(a)
require(xtable)
x <- xtable(a)
print(x, floating=FALSE, tabular.environment="bmatrix", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE)
print(x, floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE)
print(xtable(a, align=rep("c", ncol(a)+1)), floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE)
?print.xtable
?Hmisc.Overview
print(xtable(a, align=rep("c", ncol(a)+1)), floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE)
?latexTabular
latexTabular(a)
latexTabular(a, table.env="bmatrix")
latexTabular(a)
print(xtable(a, align=rep("c", ncol(a)+1)), floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE)
p <- print(xtable(a, align=rep("c", ncol(a)+1)), floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE)
paste("\left[\n", p "\right]\n")
paste("\\left[\n", p "\\right]\n")
paste("\\left[ \n", p "\\right] \n")
paste("\left[ \n", p "\right]", sep="\n")
paste("\\left[ \n", p "\\right]", sep="\n")
paste("\\left[ \n", p, "\\right]", sep="\n")
print.xtable
paste("\\left[", p, "\\right]", sep="")
p2 <- paste("\\left[", p, "\\right]", sep="")
print(p2)
?print
noquote(p2)
p2 <- paste("\left[ ", p, " \right]", sep="")
p2 <- paste("\\left[ ", p, " \\right]", sep="")
p2
p2 <- paste("\left[ ", p, " \right]", sep="")
??escape characters
??escape
p2 <- paste("\\ left[ ", p, " \right]", sep="")
p2
p2 <- paste(" \left[ ", p, " \right]", sep="")
p2 <- paste(" \left[ ", p, " \right]", sep="")
p2
p2 <- paste("\\left[ ", p, " \right]", sep="")
p2
p2 <- paste("\\\left[ ", p, " \right]", sep="")
p2 <- paste("\\ left[ ", p, " \right]", sep="")
p2
p2 <- paste(" \\ left[ ", p, " \right]", sep="")
p2
p2 <- paste(" \\left[ ", p, " \right]", sep="")
p2 <- paste(" \left[ ", p, " \right]", sep="")
cat(p2)
p2 <- paste("\\left[ ", p, " \\right]", sep="")
cat(p2)
print(xtable(a, align=rep("c", ncol(a)+1)), floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE)
cat(paste("\\left[ ", x, " \\right]"))
x <- xtable(a, align=rep("c", ncol(a)+1)), floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE)
cat(paste("\\left[ ", x, " \\right]"))
x
x <- xtable(a, align=rep("c", ncol(a)+1)), floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE)
x <- print(xtable(a, align=rep("c", ncol(a)+1)), floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE)
cat(paste("\\left[ ", x, " \\right]"))
bmatrix <- function(a) {
x <- print(xtable(a, align=rep("c", ncol(a)+1)), floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE)
cat(paste("\\left[ ", x, " \\right]"))
}
bmatrix(a)
x <- print(xtable(a, align=rep("c", ncol(a)+1)), floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE)
?print
x <- xtable(a, align=rep("c", ncol(a)+1)), floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE)
x <- xtable(a, align=rep("c", ncol(a)+1)
x <- xtable(a, align=rep("c", ncol(a)+1))
x <- xtable(a, align=rep("c", ncol(a)+1))
y <- print(x, floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE)
y
y <- invisible(print(x, floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE))
y <- print(x, floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE)
print.xtable
?print.xtable
y <- cat(x, floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE)
?echo
??echo
y <- print(x, floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE)
?print
?silent
??silent
?capture.output
y <- capture.output(print(x, floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE))
y
cat(y)
cat(paste("\\left[ ", x, " \\right]"))
cat(paste("\\left[ ", y, " \\right]"))
bmatrix <- function(a) {
x <- xtable(a, align=rep("c", ncol(a)+1))
y <- capture.output(print(x, floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE))
cat(paste("\\left[ ", y, " \\right]"))
}
bmatrix(a)
y
?capture.output
paste("\\left[ ", y, " \\right]"))
paste("\\left[ ", y, " \\right]")
?paste
y <- print(x, floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE)
paste("\\left[ ", y, " \\right]")
cat(paste("\\left[ ", y, " \\right]"))
?capture.output
capture
require(gtools)
?paste
?collapse
??collapse
capture
?paste
paste(y)
y <- capture.output(print(x, floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE))
y
paste(y)
paste(y, collapse="\n")
bmatrix <- function(a) {
x <- xtable(a, align=rep("c", ncol(a)+1))
y <- capture.output(print(x, floating=FALSE, tabular.environment="array", hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE))
cat(paste("\\left[ ", paste(y, collapse="\n"), " \\right]"))
}
bmatrix(a)
bmatrix2 <- function(a) {
x=xtable(a,align=rep("",ncol(a)+1))
print(x, floating=FALSE, tabular.environment="bmatrix",
hline.after=NULL, include.rownames=FALSE, include.colnames=FALSE)
}
bmatrix2(a)
exp(-0.1*(5.7289-2))
exp(-0.1*(5.7289-2))*480
exp(-0.1*(5.7289-2))*480*log(5.7289)
uniroot(f = function(T) {T*log(T) - 0.1*exp(0.1 * T)/(exp(0.1 * T)) - 1}
)
uniroot(f = function(T) {T*log(T) - 0.1*exp(0.1 * T)/(exp(0.1 * T)) - 1}, interval = c(0.001, 100))
f = function(T) {T*log(T) - 0.1*exp(0.1 * T)/(exp(0.1 * T)) - 1}
curve(f(x))
curve(f(x), xlim=c(0,10))
480*log(T$root)/(exp(-0.1*T$root)-1)
T = uniroot(f = function(T) {T*log(T) - 0.1*exp(0.1 * T)/(exp(0.1 * T)) - 1}, interval = c(0.001, 100))
T
T$root
480*log(T$root)/(exp(-0.1*T$root)-1)
480*log(T$root)/(exp(0.1*T$root)-1)
install.packages("gsubfn")
install.packages("gsubfn")
install.packages("gsubfn")
require(knitr)
kntir("knitexample.Rmd"")
knitr("knitexample.Rmd"")
knitr("knitexample.Rmd")
setwd("~/Dropbox/Public/jekyll-site")
